import os
from dotenv import load_dotenv
import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'museum.settings')
django.setup()

from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, ConversationHandler, MessageHandler, Filters
from bot_info.models import Subscribers, Categories

personal_data = {}

def start(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id

    if Subscribers.objects.filter(tg_id=str(chat_id)).exists():
        context.bot.send_message(chat_id=chat_id, text='–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!')
        return ConversationHandler.END
    else:
        keyboard = [[KeyboardButton('–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        text = (
            'üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —É—é—Ç–Ω—ã–π —É–≥–æ–ª–æ–∫ –∫—É–ª—å—Ç—É—Ä—ã! üåü\n'
            '–ó–¥–µ—Å—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è –∏–∑ –º–∏—Ä–∞ –º—É–∑–µ—è –∏—Å—Ç–æ—Ä–∏–∏ –∏ —ç—Ç–Ω–æ–≥—Ä–∞—Ñ–∏–∏. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!\n\n'
            '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º: https://t.me/Apofiz2036 üòä'
        )
        context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
        return 'CHOOSING'


def agreement(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    keyboard = [[KeyboardButton('–°–æ–≥–ª–∞—Å–µ–Ω'), KeyboardButton('–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω')]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    text = '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–º –Ω—É–∂–Ω–æ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.'
    context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)

    pdf_path = 'media/consents.pdf'
    with open(pdf_path, 'rb') as pdf_file:
        caption_text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–µ–ª–∏—Ç–µ –º–∏–Ω—É—Ç–∫—É, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —ç—Ç–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º. –í–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–µ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ –∑–¥–µ—Å—å –µ—â—ë –ª—É—á—à–µ!'
        context.bot.send_document(
            chat_id=chat_id,
            document=pdf_file,
            caption=caption_text
        )
    return 'CHOOSING'

def handle_agreement(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if update.message.text == '–°–æ–≥–ª–∞—Å–µ–Ω':
        text = 'üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ! –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –º–∏—Ä—É –º—É–∑–µ—è.'
        context.bot.send_message(chat_id=chat_id, text=text)
        return name_question(update, context)

    else:
        text = 'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –Ω–∞–º —à–∞–Ω—Å —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–µ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ –∑–¥–µ—Å—å –µ—â—ë –ª—É—á—à–µ!'
        context.bot.send_message(chat_id=chat_id, text=text)
        return agreement(update, context)

def name_question(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    text = 'üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ø–æ –∏–º–µ–Ω–∏.'
    context.bot.send_message(chat_id=chat_id, text=text)
    return 'NAME_INPUT'

def name_input(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    user_name = update.message.text

    context.user_data['tg_id'] = str(chat_id)
    context.user_data['name'] = user_name
    context.user_data['phone'] = None
    context.user_data['categories'] = []

    text = 'üì± –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ —Å–≤—è–∑–∏.'
    context.bot.send_message(chat_id=chat_id, text=text)
    return 'PHONE_INPUT'

def phone_input(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    user_phone = update.message.text
    context.user_data['phone'] = user_phone

    return categories(update, context)

def categories(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id  
    keyboard = [[KeyboardButton('–î–æ—à–∫–æ–ª—å–Ω–∏–∫–∏'), KeyboardButton('–®–∫–æ–ª—å–Ω–∏–∫–∏')],
                [KeyboardButton('–°—Ç—É–¥–µ–Ω—Ç—ã'), KeyboardButton('–í–∑—Ä–æ—Å–ª—ã–µ')],
                [KeyboardButton('–ú–∞—Å—Ç–µ—Ä–∞'), KeyboardButton('–ê–∫—Ç–∏–≤–∏—Å—Ç—ã')],
                [KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä')]
                ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    text = 'üìö –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã! –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–≤–ª–µ–∫–∞—é—Ç.'
    context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
    text = 'üåü –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –≤—ã–±–∏—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚Äî —á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ!'
    context.bot.send_message(chat_id=chat_id, text=text)
    return 'CHOOSING'

def handle_selection(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id 
    text = update.message.text

    if text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä':
        categories_list = context.user_data.get('categories', [])
        tg_id = context.user_data.get('tg_id')
        name = context.user_data.get('name')
        phone_number = context.user_data.get('phone')

        subscriber = Subscribers.objects.create(
            tg_id=tg_id,
            name=name,
            phone_number=phone_number
        )

        category_objects = Categories.objects.filter(category_name__in=categories_list)
        subscriber.categories.set(category_objects)

        subscriber.save()

        context.bot.send_message(chat_id=chat_id, text='üéâ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å –Ω–∞–º–∏!')
        return ConversationHandler.END
   
    else:
        if text not in context.user_data['categories']:
            context.user_data['categories'].append(text)
            context.bot.send_message(chat_id=chat_id, text='‚úÖ –í—ã –¥–æ–±–∞–≤–∏–ª–∏: {}. –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!'.format(text))
        else:
            context.bot.send_message(chat_id=chat_id, text='ü§î –≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞: {}. –ú–æ–∂–µ—Ç, –¥–æ–±–∞–≤–∏–º –µ—â—ë —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ?'.format(text))
            
    return 'CHOOSING'

def main():
    TELEGRAM_TOKEN = os.environ['TELEGRAM_TOKEN_FOR_ALL']
    updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            'CHOOSING':[
                MessageHandler(Filters.regex('^–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É'), agreement),
                MessageHandler(Filters.regex('^–°–æ–≥–ª–∞—Å–µ–Ω'), handle_agreement),
                MessageHandler(Filters.regex('^–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω'), handle_agreement),
                MessageHandler(Filters.text, handle_selection)
            ],
            'NAME_INPUT':[
                MessageHandler(Filters.text & ~Filters.command, name_input)
            ],
            'PHONE_INPUT':[
                MessageHandler(Filters.text & ~Filters.command, phone_input)
            ]
        },
        fallbacks=[],
    )

    dispatcher.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()